public class BinaryNumberOfOne {

    /**
     * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
     * 注意：
     * 正数的原码，补码，反码，都是其本身
     * 负数的反码，才需要符号位后取反，补码 = 反码 + 1
     * 但在计算机中，所有的数都是补码的形式，所以这个题中不需要分正数，负数
     * @param args
     */
    public static void main(String args[]){
        System.out.println("count: "+NumberOf1(3));
    }

    /**
     * 解法一：
     * 如果一个整数不为0，那么这个整数至少有一位是1。
     * 如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，
     * 原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。
     * 把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0
     * 循环上述过程，知道整数为0，有几个1就会循环上面几次
     * 例如：一个二进制数1100，减去1后为 1011，将1100 & 1011 = 1000
     * 1000不为0，再来一次 。减1为0111 & 1000 = 0000
     * 所以count = 2
     * @param n
     * @return
     */
    public static int NumberOf1(int n)
    {
        int count = 0;
        while(n!= 0){
            count++;
            n = n & (n - 1);
            System.out.println(n);
        }
        return count;
    }

    /**
     * 解法二：我觉得这道题是考的java中的bitCount方法
     * Jdk源码所表现出来的思路：
     * 结论：若有一个二进制数，他的“1”的数量等于二进制数本身 - 二进制高位上是0？0:1 。
     * 验证：
     * 00 - 0 = 0;
     * 01 - 0 = 1;
     * 10 - 1 = 1;
     * 11 - 1 = 10 = 2;
     * 如何计算两位的二进制数中“1”的数量？分两步：
     * 名词定义：两位的二进制数上从右到左第一位叫【个位】，第二位叫【二位】（沿用十进制叫法）。
     * 1、【个位】为0或者1就代表个位上“1”的数量，这个毫无疑问。
     * 2、【二位】上的值右移1位，原【个位】直接溢出舍弃，则移位后【个位】即原【二位】，为0或者1即代表原两位二进制数的【二位】上“1”的数量。
     * 以上两步的和就是这个二位二进制数的bitCount。
     * 用伪代码描述：
     * 已知：& 是按位与，二进制数按位与01即取【个位】上的值。
     * 1、a的个位数 a&01
     * 2、a的二位数 a>>1&01
     * 得：bitCount = (a&01) + ((a>>>1)&01) ; 注—-‘&’优先级低于’+’，所以要用括号
     * https://blog.csdn.net/u011497638/article/details/77947324
     * 算了，直接看这篇文章的解释吧，我觉得要自己实现还是提供困难的
     * @param n
     * @return
     */
    public int  NumberOf12(int n) {
        //下述代码是Interger.bitCount(n)的源码
        n = n - ((n >>> 1) & 0x55555555);
        n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);
        n = (n + (n >>> 4)) & 0x0f0f0f0f;
        n = n + (n >>> 8);
        n = n + (n >>> 16);
        return n & 0x3f;
    }

    /**
     * 解法三：直接右移，一个一个位判断
     * @param n
     * @return
     */
    public int  NumberOf13(int n) {
       int count = 0;
       while(n!=0){
           //逐个判断低位是否为1,与操作的时候1会变为0001，n也会变为补码形式与1相与
           count  += n&1;
           //无符号右移，例如从11101变成1110
           n = n>>>1;
       }
       return count;
    }
}
