import java.util.ArrayList;

public class UglyNumber {
    /**
     * 把只包含质因子2、3和5的数称作丑数（Ugly Number）。
     * 例如6、8都是丑数，但14不是，因为它包含质因子7。
     * 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。
     */
    /**
     * 解题思路：
     * 首先从丑数的定义我们知道，一个丑数的因子只有2,3,5，
     * 换句话说一个丑数一定由另一个丑数乘以2或者乘以3或者乘以5得到
     * 所以我们只用比较3个数：用于乘2的最小的数、用于乘3的最小的数，用于乘5的最小的
     *
     * 那么我们可以维护三个队列（在代码里面不用三个队列，只需要三个变量（指针）记录位置）
     * （1）丑数数组： 1
     * 乘以2的队列：2
     * 乘以3的队列：3
     * 乘以5的队列：5
     * 选择三个队列头最小的数2加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
     * （2）丑数数组：1,2
     * 乘以2的队列：4
     * 乘以3的队列：3，6
     * 乘以5的队列：5，10
     * 选择三个队列头最小的数3加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
     * （3）丑数数组：1,2,3
     * 乘以2的队列：4,6
     * 乘以3的队列：6,9
     * 乘以5的队列：5,10,15
     * 选择三个队列头里最小的数4加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
     * （4）丑数数组：1,2,3,4
     * 乘以2的队列：6，8
     * 乘以3的队列：6,9,12
     * 乘以5的队列：5,10,15,20
     * 选择三个队列头里最小的数5加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
     * （5）丑数数组：1,2,3,4,5
     * 乘以2的队列：6,8,10，
     * 乘以3的队列：6,9,12,15
     * 乘以5的队列：10,15,20,25
     * 选择三个队列头里最小的数6加入丑数数组，
     * 但我们发现，有两个队列头都为6，所以我们弹出两个队列头，同时将12,18,30放入三个队列；
     * @param index
     * @return
     */
    public static int GetUglyNumber_Solution(int index) {
        if(index < 0) {
            return 0;
        }
        ArrayList<Integer> array = new ArrayList<>();
        array.add(1);
        int n2 = 0 ,n3 = 0,n5 = 0;
        while(array.size() < index){
            int m2 = array.get(n2) * 2;
            int m3 = array.get(n3) * 3;
            int m5 = array.get(n5) * 5;
            int min = Math.min(m2,Math.min(m3,m5));
            array.add(min);
            if(min == m2){
                n2 ++ ;
            }
            if(min == m3){
                n3 ++ ;
            }
            if(min == m5){
                n5 ++ ;
            }

        }
        return array.get(array.size() - 1);
    }
    public static void main(String args[]){
        System.out.println(GetUglyNumber_Solution(3));
    }
}
